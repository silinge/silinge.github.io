@charset "utf-8";
/* CSS Document */

/*
h1{
	font-family: serif;
}

#page-title{
	font-family: sans-serif;
}
.title{
	font-family: monospace;
}*/
/*----*/
h1{
	color: #2f4f4f;
	margin-bottom: 10px;
}

/*
#main-nav{
	margin-top: 10px;
	list-style: none;
	padding-left: 0;
}

#main-nav li{
	display: inline-block;
}

#main-nav a{
	color: white;
	background-color: #13a4a4;
	padding: 5px;
	border-radius: 2px;
	text-decoration: none;
}
*/

/*!important 标记为重要声明 比如 color:black !important; 可以当作更高优先级使用*/
/*选择器的优先级，两个类名的选择器比只有一个类名的选择器优先级更高 举个例子 上面的main-nav a 比下面的featured优先级更高 */
/*.featured{*/
/*background-color:orange;*/
/*它的优先级低 所以不起作用*/
/*给它个!important 优先级就提高了。*/
/*
background-color:violet !important;
}
*/

/*!important 暂时好使，但是用了一次还会再加无数次 使用更加通用的办法不粗暴的提供优先级 给.feature 加ID 它的优先级就比 #main-nav a更高，分析优先级标记1,1,0 比1,0,1更高。不用!important 一样有效。*/
/*
#main-nav .featured{
	background-color: deepskyblue;
}
*/

/*id选择器比类选择器优先级更高，类选择器比标签选择器优先级更高，如果选择器的ID数量更多，则它会胜出因为它更明确。如果ID数量一致，那么拥有最多类的选择器胜出，如果上面两项都一致，那么拥有最多标签名的选择器胜出。*/
/*优先级低到高，顺序 4个标签，3个标签和一个类，2个类，1个ID 伪类选择器(:hover)和属性选择器([type="input"]) 与一个类选择器的优先级相同。通用选择器(*)和组合器(> + ~) 对优先级没有影响。*/
/*
html body header h1{
	color:blue;
}
body header.page-header h1{
	color:orange;
}

.page-header .title{
	color: green;
}
#page-title{
	color:cyan;
}
*/

/*优先级标记 数值标记逗号隔开，"1,2,2"表示选择器由1个ID，2个类，2个标签组成。优先级从高到底依次是ID，类，标签。*/

/*接入51行，除了提高自己的优先级 还有一个方法是降低对手的优先级 */
.nav {
	margin-top:10px;
	list-style: none;
	padding-left: 0;
}
.nav li{
	display: inline-block;
}
.nav a{
	color: wheat;
	background-color: #13A5A4;
	padding: 5px;
	border-radius: 2px;
	text-decoration: none;
}

/*
.nav .featured{
	background-color: coral;
}
*/
/*以上两个类比一个类一个标签更高*/

/*还可以改成同等优先级，但是顺序靠后会起作用 96行修改*/
a.featured{
	background-color: palevioletred;
}

/*链接样式lvha按照这个顺序*/
a:link{
	color: blue;
	text-decoration: none;
}
a:visited{
	color: purple;
}
a:hover{
	text-decoration: underline;
}
a:active{
	color: red;
}

/*层叠值 浏览器遵循3个步骤 来源，优先级，源码顺序 来解析网页上每个元素的每个属性，如果一个声明在层叠中胜出 它就被称作一个层叠值。元素的每个属性最多只有一个层叠值。网页上一个特定的段落可以有一个上外边距和一个下外边距 但是不能有两个不同的上外边距和两个不同的下外边距。如果css为同一个属性指定了不同的值，层叠最终会选择一个值来渲染元素，这就是层叠值。*/
/*经验 在选择器中不要使用ID ，不要使用!important*/

/*使用inherit关键字 用它来覆盖另一个值 这样该元素可以继承其父元素的值 initial 关键字是使用默认值 color=black width:auto.*/

.footer{
	color:#666;
	background-color: #CCCCCC;
	padding: 15px 0;
	text-align: center;
	font-size: 14px;
}
.footer a{
	color: inherit;
	text-decoration: underline;
}

/*简写属性会设置省略值为其初始值*/
/*
h1{
	font-weight: bold;
}

.title{
	font: 32px helvetica, arial, sans-serif;
}*/
/*简写值的顺序，有些属性可以不计较，有些属性需要限制。margin, padding 上右下左的顺序 给一个值则四边都使用这个值，给两个值则对边使用相同的值，给三个值则最后一项值取对边的值， 有些属性最多支持两个值，background-position, box-shadow, text-shadow 先垂直（上下）后水平（右左）*/
/*
.nav a{
	color:yellow;
	background-color: #16a8a8;
	padding:10px 15px 0 5px;
	border-radius: 2px;
	text-decoration: none;
}*/
.nav .featured{
	background-color: orange;
	box-shadow: 10px 2px #8f3030;
}
.padded{
	font-size: 16px;
	padding: 1em;
}

.box{
	padding: 1em;
	border-radius: 1em;
	background-color: lightgreen;
}
.box-small{
	font-size: 12px;
}
.box-large{
	font-size: 20px;
}

/*这两个em就有不一样的大小了*/

/*当没有值可以继承，继承body的元素值 并且先获取font-size的值，然后在它的基础上计算其他值，下面这个padding就是16*1.2*2px了 这又遇到一个多级嵌套问题，比如多级列表字号会越来越大或者越来越小。*/
body{
	font-size: 16px;
}
.slogan{
	font-size:1.2em;
	padding: 2em;
}
/*
ul{
	font-size: 1.5em;
}
*/
/*当浏览器解析HTML文档时，在文档中根节点事所有其他元素的祖先节点，根节点有一个伪类选择器(:root)可以用来选中它自己 等价于类型选择器html 但是html的优先级相当于一个类名 而不是一个标签。 rem事root em缩写，rem不是相对于当前元素，而是相对于根元素的单位 不管在文档的什么位置使用rem, 1.2rem都是相同的计算值，1.2乘以根元素的字号，字号，字号初始值很重要*/
:root{
	font-size: 1em;
/*	去浏览器的默认值16px;*/
}
ul{
	font-size: 2rem;
}

/*对刚才的 class panel 设置属性*/
/*
.panel{
	padding: 1em;
	border-radius: 0.5em;
	border: 1px solid #999;
}
.panel > h2{
	margin-top: 0;
	font-size: 0.8rem;
	font-weight: bold;
	text-transform: uppercase;
}
*/

/*媒体查询 即@media规则，可以指定某种屏幕尺寸或媒体类型（打印机，屏幕）下的样式。*/
/*
:root{
	font-size: 0.75em;
}
@media(min-width:800px){
	:root{
		font-size: 0.875em;
	}
}
@media(min-width:1200px){
	:root{
		font-size: 1em;
	}
}*/

/*同一个页面里的普通面板和大面板*/
.panel{
	font-size: 1rem;
	padding: 1em;
	border: 1px solid #999;
	border-radius: 0.5em;
}

.panel > h2{
	margin-top: 0;
	font-size: 0.8em;
	font-weight: bold;
	text-transform: uppercase;
}

.panel .large{
	font-size: 1.2rem;
/*	复合选择器中同时拥有panel和large类的元素*/
}

/*218 视口的相对单位 vh 视口高度的1/100 vw视口宽度1/100 vmin 视口宽高较小一方的1/100 vmax视口宽高中较大一方的1/100 50vm就是视口宽度的一半。*/
.square218{
	width: 50vmin;
	height: 50vmin;
	background-color: greenyellow;
}
/*219使用calc()定义字号 可以使用加减乘除四则运算，运算符号 前后要加空格。*/
/*
:root{
	font-size: calc(0.5em + 1vw);
}
*/
/*无单位的数值和行高，font-weight 700=bold 400=normal 任何长度单位都可以使用无单位的值0， 不能用于角度值 比如度 时间值 秒。还有line-height它的值既可以有单位也可以无单位。通常我们应该使用无单位的数值 因为它们继承的方式不一样*/
/*221用无单位的数值定义行高 后代元素继承了无单位的值。about-us*/
/*
body{
	line-height: 1.2;
}
.about-us{
	font-size: 2em;
}
*/
/*这个段落继承了行高1.2，因为段落字号32px=2*16px 所以行高32px*1.2=38.4px 每行文字之间都会有一个合理间距。*/

/*
body{
	line-height: 1.2em;
	后代元素继承了计算值19.2px 与上面无单位值继承不一样。
}
*/
/*
.about-us{
	font-size: 2em;
	计算值为32px
}
*/
/*当一个元素的值定义为长度事子元素会继承它的计算值，当使用em等单位定义行高是，他们的值是计算值，传递到了任何继承子元素上。如果子元素有不同的字号，并且继承了line-height属性，就会造成意想不到的结果 比如文字重叠。*/


/*
:root{
	--main-font:helvetica, arial, sans-serif;
}
这个代码223清单定义了一个名叫--main-font的变量，将其值设置为一些常见的sans-serif字体 变量名前面必须有两个连字符(--) 用来跟CSS属性区分 剩下的部分可以随意命名。变量必须在一个声明块内声明，这里使用了 root选择器，因此该变量可以在整个网页使用 变量声明本身什么也没做，我们使用时才能看到效果。将这个变量用到一个段落上。 
调用函数var()就能使用该变量 利用该函数引用前面定义的变量--main-font*/
/*
:root {
	--main-font: helvetica, arial, sans-serif;
}
p{
	font-family: var(--main-font);
}*/
/*加个颜色*/
/*
:root{
	--main-font:helvetica, arial, sans-serif;
	--brand-color:#389;
}
*/
/*
p {
	font-family: var(--main-font);
	color:var(--brand-color);
}*/
/*指定个备用值 声明值没有定义的时候，使用备用值。*/
/*
p{
	font-family: var(--main-font, sans-serif);
	color: var(--secondary-color, cyan);
}*/
/*整两个黑白版228*/
:root{
	--main-bg:#fff;
	--main-color:#000;
}
.panel{
	font-size: 1rem;
	padding: 1em;
	border:1px solid #999;
	border-radius: 0.5em;
	background-color: var(--main-bg);
	color:var(--main-color);
}
.panel >h2{
	margin-top: 0;
	font-size: 0.8em;
	font-weight: bold;
	text-transform: uppercase;
}
.dark{
	margin-top: 2em;
	padding: 1em;
	background-color: #999;
	--main-bg:#333;
	--main-color:#fff;
}
/*-----------------------------------------代码3.2*/

/*
body{
	background-color: #EEEEEE;
	font-family: helvetica, arial, sans-serif;
}
header{
	color:#FFFFFF;
	background-color: #0072b0;
	border-radius: .5em;
}
main{
	display: block
}
*/
/*
.main{
	float: left;
	width: 70%;
	background-color: #FFFFFF;
	border-radius: .5em;
	添加box-sizing属性 两块都要添加
	box-sizing: border-box;
}
.sidebar{
	float: left;
	width: 30%;
	padding: 1.5em;
	background-color: #FFFFFF;
	border-radius: .5em;
	box-sizing: border-box;
}
*/
/*ie 的bug会默认将<main>元素渲染成行内元素，而不是块级元素，所有代码中用声明display:block来纠正。 两块设置了左对齐，但他们共同宽度可能超过100% 当给一个元素设置宽高的时候指定的是内容的宽高 所有的内边距 边框 外边距都是追加到该宽度上的。上面主容器和侧栏宽度加起来是100%加1.5em + 1.5em 可以用计算函数 calc(30% - 3em) 这样总宽度保持在100% 可以排成一行。
调整盒模型 box-sizing 默认值 content-box 意味着任何指定的宽高只会设置内容盒子的大小，将box-sizing设置为border-box后，height和width属性会设置内容，内边距以及边框的大小总和，不必再担心总宽度计算问题。盒模型box-sizing改为border-box 使得内边距不会让一个元素更宽，而是让内部的内容更窄。 
*/
/*设置全局border-box*/
/*
*,
::before,
::after{
	box-sizing: border-box;
}
*/
/*如果还使用第三方样式表组件，上面的全局设置可能会被覆盖。换一种 盒模型通常不会被继承 使用inherit可以强制继承
可以在必要是选中第三方组件的顶级容器，将其恢复为content-box.这样组件的内部元素会继承该盒模型。
*/
:root{
	box-sizing: border-box;
}

*,
::before,
::after{
	box-sizing: inherit;
}

.third-party-component{
	box-sizing: content-box;
}

/*添加间距 宽度减1 加到margin-left里面。 第二种办法使用calc()函数。*/
/*
.main{
	float: left;
	width: 70%;
	background-color: #FFFFFF;
	border-radius: .5em;
}
.sidebar {
	float: left;
	width: 29%;
	margin-left: 1%;
	padding: 1.5em;
	background-color: gray;
	border-radius: .5em;
}
*/
/*----2 calc()*/
/*
.main {
	float: left;
	width: 70%;
	background-color: green;
	border-radius: .5em;
}

.sidebar {
	float: left;
	width: calc(30% - 1.5em);
	这里的calc运算符 前后加空格 空格 空格啊。
	margin-left: 1.5em;
	padding: 1.5em;
	background-color: deepskyblue;
	border-radius: .5em;
}*/
/*---------------元素高度问题 控制溢出行为*/
/*overflow属性 默认值visible 所有内容可见 即使溢出容器边缘，hidden溢出容器内边距边缘的内容被裁剪无法看见，scroll 出现滚动条，auto只有内容溢出时容器才会出现滚动条。*/
/*控制水平方向溢出 和 垂直方向溢出 overflow-x overflow-y*/
/*css表格布局 给容器设置display:table, 给每一列设置display:table-cell css表格不像html那样必须有行元素 因此这里没有table-row元素。*/
/*
.container{
	display: table;
	width: 100%;
	让容器布局像表格一样 让表格填充容器的宽度
}
.main{
	display: table-cell;
	让列布局像表格的单元格一样。
	width: 70%;
	background-color: moccasin;
	border-radius: .5em;
}
.sidebar{
	display: table-cell;
	width: 30%;
	margin-left: 1.5em;
	外边距不再生效
	padding: 1.5em;
	background-color: violet;
	border-radius: .5em;
}*/
/*这个操作 显示为table的元素宽度不会扩展到100% 因此需要指定宽度，但是还是缺少了间隔，这是因为外边距并不会作用于table-cell元素。用表格元素的border-spacing属性来定义单元格间距。该属性接受两个长度值：水平间距和垂直间距 border-spacing: 1.5em 0. 但是有一个副作用 这个值也会作用于表格外边缘。这样两列就无法跟头部左右对齐。
再加个新容器再加个负外边距 这样来抵消副作用
*/
/*
.wrapper{
	margin-left: -1.5em;
	margin-right: -1.5em;
}

.container{
	display: table;
	width: 100%;
	border-spacing: 1.5em 0;
}
.main{
	display: table-cell;
	width: 70%;
	background-color: cornflowerblue;
	border-radius: .5em;
}
.sidebar{
	margin-right: -1.5em;
	display: table-cell;
	width: 30%;
	padding: 1.5em;
	background-color: lawngreen;
	border-radius: .5em;
}*/

/*----------------flexbox实现等高*/
.container{
	display: flex;
}

.main{
	width: 70%;
	background-color: aquamarine;
	border-radius:0.5em;
}

.sidebar{
	width: 30%;
	padding: 1.5em;
	margin-left: 1.5em;
	background-color: blueviolet;
	border-radius: .5em;
}

/*----min-height和max-height*/
header{
	padding-top: 4em;
	padding-bottom: 4em;
	color: lemonchiffon;
	background-color: lightcoral;
	border-radius: .5em;
}